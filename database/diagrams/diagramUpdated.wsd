@startuml

' !define ENTITY
!define PRIMARY_KEY(x) <b><color:blue>x</color></b>
!define FOREIGN_KEY(x) <color:green>x</color>

hide circle



' Padrones
    ' Children
        ' Users
            ' Gender
            ' Cribroom
            ' Shift
            ' User
            ' Guardian
            ' Children_state
            ' Padron


entity Cribroom {
    + PRIMARY_KEY(id)
    --
    max_capacity
    --
    FOREIGN_KEY(Adress)
    FOREIGN_KEY(Zone)
    FOREIGN_KEY(Shift)
}
' Cribroom muchos a muchos Shift
' Cribroom puede tener mañana y tarde o solo mañana, etc


entity Desinfection {
    + PRIMARY_KEY(id)
    --
    desinfection_date
    company
    company_phone
    --
    FOREIGN_KEY(Cribroom)
}
Desinfection "*" -- "1" Cribroom

entity Payout {
    + PRIMARY_KEY(id)
    --
    amount
    month
    --
    FOREIGN_KEY(Zone)
    ' Payout_Adress = capital or upcountry
}

entity Zone {
    + PRIMARY_KEY(id)
    --
    name
    --

    ' interior or capital
}

Payout "*" - "1" Zone
Zone "1" - "*" Cribroom

entity Child {
    + PRIMARY_KEY(id)
    --
    first_name
    last_name
    dni
    birthdate
    registration_date
    disenroll_date
    --
    FOREIGN_KEY(Gender)
    FOREIGN_KEY(Cribroom)
    FOREIGN_KEY(Shift)
    social_worker = FOREIGN_KEY(User)
    FOREIGN_KEY(Guardian)
    FOREIGN_KEY(Child_state)
}

Cribroom "1" - "*" Child

entity User {
    + PRIMARY_KEY(id)
    --
    username
    password
    --
    FOREIGN_KEY(User_email)
    FOREIGN_KEY(Role)
}

entity Cribroom_User {
    + PRIMARY_KEY(id)
    --

    --
    FOREIGN_KEY(Cribroom)
    FOREIGN_KEY(User)
}

Cribroom "1" - "*" Cribroom_User
Cribroom_User "*" - "1" User


entity Guardian {
    + PRIMARY_KEY(id)
    --
    first_name
    last_name
    dni 
    birthdate
    --
    FOREIGN_KEY(Guardian_phone)
    FOREIGN_KEY(Gender)
}

Child "*" -- "1" Guardian

entity Form {
    + PRIMARY_KEY(id)
    --
    generation_date
    --
    FOREIGN_KEY(Cribroom)
    FOREIGN_KEY(User)
    FOREIGN_KEY(Role)
}

User "1" -- "*" Form
Cribroom "1" - "*" Form

' entity Question_type {
'     + PRIMARY_KEY(id)
'     --
'     text
'     --
' }

' entity Option {
'     + PRIMARY_KEY(id)
'     --
'     text
'     --
'     FOREIGN_KEY(Question)
' }

entity Question {
    + PRIMARY_KEY(id)
    --
    question
    category
    --
    FOREIGN_KEY(Question_type)
    FOREIGN_KEY(Form)
}
Question "*" - "1" Form

entity Answer {
    + PRIMARY_KEY(id)
    --
    answer
    --
    FOREIGN_KEY(Question)
    FOREIGN_KEY(User)
}
Answer "*" - "1" Question


' DUDAS
    ' Custom USER model
        ' por que no usar django model user
        ' analizar tema de roles y permissions
        ' para ver si storear en diagrama o no
    ' Relacionar Forms con Cribrooms
    ' Ver si relacionar User con Cribrooms
    ' Analizar campos de Forms
        ' posiblemente Role sea necesario

    ' User Forms muchos a muchos
    ' User Cribroom muchos a muchos

' entidad
' CUIT
' Salas name
' ubicacion
' 
' 


' diferenciar trabajadora social del resto

@enduml